{"version":3,"sources":["InfoBox.js","Map.js","Table.js","util.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","Card","className","CardContent","Typography","color","Map","countries","casesType","center","zoom","TileLayer","url","attribution","Table","map","country","sortData","data","sortedData","sort","a","b","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","lable","tooltipItem","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","countryInfo","setCountryInfo","tableData","setTableData","lat","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","long","console","log","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","recovered","todayDeaths","deaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6b08b2f2.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport './InfoBox.css'\r\n\r\nfunction InfoBox({ title, cases, total }) {\r\n  return (\r\n    <Card className=\"infoBox\">\r\n      <CardContent>\r\n          {/* title,cases,total */}\r\n        <Typography className=\"infoBox_title\" color=\"textSecondary\">\r\n            {title}\r\n        </Typography>\r\n        <h2 className=\"infoBox_cases\">{cases}</h2>\r\n        <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n            {total}\r\n        </Typography>\r\n\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport \"./Map.css\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\n// import { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\n// import { Map as LeafletMap, TileLayer } from \"react-leaflet\"; //map not working -MapContainer \r\n// import {showDataOnMap} from \"./util\"\r\n\r\n// npm i leaflet\r\n// npm i react-leaflet\r\nfunction Map({countries,casesType,center,zoom}) {\r\n\r\n\r\n   return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n\r\n        {/* loop through countries and draw circle on the screen */}\r\n        {/* {showDataOnMap(countries,casesType)} */}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport './Table.css'\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({country,cases}) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td><strong>{cases}</strong></td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\n// import numeral from \"numeral\";\r\n// import { Circle, Popup } from \"react-leaflet\";\r\n\r\n// const casesTypeColors = {\r\n//   cases: {\r\n//     hex: \"#CC1034\",\r\n//     rgb: \"rgb(204, 16, 52)\",\r\n//     half_op: \"rgba(204, 16, 52, 0.5)\",\r\n//     multiplier: 800,\r\n//   },\r\n//   recovered: {\r\n//     hex: \"#7dd71d\",\r\n//     rgb: \"rgb(125, 215, 29)\",\r\n//     half_op: \"rgba(125, 215, 29, 0.5)\",\r\n//     multiplier: 1200,\r\n//   },\r\n//   deaths: {\r\n//     hex: \"#fb4443\",\r\n//     rgb: \"rgb(251, 68, 67)\",\r\n//     half_op: \"rgba(251, 68, 67, 0.5)\",\r\n//     multiplier: 2000,\r\n//   },\r\n// };\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\n// export const prettyPrintStat = (stat) =>\r\n//   stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// export const showDataOnMap = (data, casesType = \"cases\") =>\r\n//   data.map((country) => (\r\n//     <Circle\r\n//       center={[country.countryInfo.lat, country.countryInfo.long]}\r\n//       color={casesTypeColors[casesType].hex}\r\n//       fillColor={casesTypeColors[casesType].hex}\r\n//       fillOpacity={0.4}\r\n//       radius={\r\n//         Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n//       }\r\n//     >\r\n//       <Popup>\r\n//       im pop\r\n//       </Popup>\r\n//     </Circle>\r\n//   ));","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      lable: function (tooltipItem, data) {\r\n        // npm i numeral\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          //include a dollor sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\" }) {\r\n  // add dependenci call reactchart js 2\r\n  //npm install --save react-chartjs-2 chart.js or\r\n  // npm i react-chartjs-2\r\n\r\n  //and install this also\r\n  //   npm i react-chartjs-2 chart.js\r\n\r\n  const [data, setData] = useState({});\r\n\r\n  //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          // console.log(data);\r\n          let chartData = buildChartData(data, \"cases\");\r\n          setData(chartData);\r\n          // console.log(chartData);\r\n          //   buildChartData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"black\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import {\n  Card,\n  FormControl,\n  MenuItem,\n  Select,\n  CardContent,\n} from \"@material-ui/core\";\nimport { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  // make worldwide by default fist option in drop box\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: 100.6197 });\n  const [mapZoom, setMapZoom] = useState(3);\n  // const [mapCountries, setMapCountries] = ([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  //endpoint -> https://disease.sh/v3/covid-19/\n  //endpoint -> https://disease.sh/v3/covid-19/countries\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2, // to see country code add .iso2 to flag .flag\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          // setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    // console.log('>>>>>>', countryCode)\n    setCountry(countryCode);\n\n    // https://disease.sh/v3/covid-19/all         ->>>>world wide\n    // https://disease.sh/v3/covid-19/countries/[countri_code]\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        // all the data from the country the response\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(5);\n      });\n  };\n\n  console.log(\"country information\", countryInfo);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1>Covid 19 Tracker</h1>\n          <FormControl className=\"app_dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              {/*onChange- to change the selected value in dropdown  */}\n\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n\n              {/* loop through all the countries and show a drop dropdown list */}\n\n              {/* <MenuItem value=\"worldwide\">worldwide</MenuItem>\n            <MenuItem value=\"worldwide\">Option 2</MenuItem>\n            <MenuItem value=\"worldwide\">Option 3</MenuItem>\n            <MenuItem value=\"worldwide\">world</MenuItem> */}\n              {/* <MenuItem value=\"worldwide\">worldwide</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* info box - corona cases*/}\n        {/* info box corona recoveries*/}\n        {/* info box corona deaths*/}\n\n        <div className=\"app_stats\">\n          <InfoBox\n            title=\"CoronaVirus Cases\"\n            cases={countryInfo.todayCases}\n            total={countryInfo.cases}\n          />\n          <InfoBox\n            title=\"Recovered\"\n            cases={countryInfo.todayRecovered}\n            total={countryInfo.recovered}\n          />\n          <InfoBox\n            title=\"Deaths\"\n            cases={countryInfo.todayDeaths}\n            total={countryInfo.deaths}\n          />\n        </div>\n\n        {/* header */}\n        {/* title+ select input dropdown field  */}\n\n        {/* map  */}\n\n        <Map  center={mapCenter} zoom={mapZoom} />\n        {/* countries={mapCountries} */}\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          {/* table  */}\n          <h3>Live Cases by country</h3>\n          <Table countries={tableData} />\n          {/* graph */}\n          <br></br>\n          <h3><span>Worldwide new cases</span></h3>\n          <br></br>\n\n          <LineGraph />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}